const { z } = require('zod');

// Core notification schema - Single Source of Truth
const NotificationSchema = z.object({
  id: z.string().uuid().optional(), // Auto-generated by database
  user_id: z.string().uuid(),
  title: z.string().min(1).max(255),
  message: z.string().min(1).max(2000),
  type: z.enum(['info', 'success', 'warning', 'error']).default('info'),
  category: z.enum(['system', 'onboarding', 'project', 'financial', 'compliance']).default('system'),
  priority: z.enum(['low', 'normal', 'high', 'urgent']).default('normal'),
  read: z.boolean().default(false),
  action_url: z.string().url().optional().nullable(),
  action_text: z.string().max(100).optional().nullable(),
  created_at: z.date().optional(), // Auto-generated by database
  updated_at: z.date().optional(), // Auto-generated by database
});

// Input schema for creating notifications (excludes auto-generated fields)
const CreateNotificationSchema = NotificationSchema.omit({
  id: true,
  read: true,
  created_at: true,
  updated_at: true,
});

// Update schema for modifying notifications
const UpdateNotificationSchema = NotificationSchema.partial().omit({
  id: true,
  user_id: true,
  created_at: true,
});

// Query schema for filtering notifications
const NotificationQuerySchema = z.object({
  user_id: z.string().uuid().optional(),
  type: z.enum(['info', 'success', 'warning', 'error']).optional(),
  category: z.enum(['system', 'onboarding', 'project', 'financial', 'compliance']).optional(),
  priority: z.enum(['low', 'normal', 'high', 'urgent']).optional(),
  read: z.boolean().optional(),
  limit: z.number().int().min(1).max(100).default(50),
  offset: z.number().int().min(0).default(0),
});

// Response envelope schema
const NotificationResponseSchema = z.object({
  data: z.union([
    NotificationSchema,
    z.array(NotificationSchema),
    z.null(),
  ]),
  meta: z.object({
    total: z.number().int().min(0).optional(),
    unread_count: z.number().int().min(0).optional(),
    page: z.number().int().min(1).optional(),
    limit: z.number().int().min(1).optional(),
    etag: z.string().optional(),
    next_step: z.string().optional(),
  }).optional(),
  errors: z.array(z.object({
    field: z.string().optional(),
    message: z.string(),
    code: z.string().optional(),
  })).optional(),
});

// TypeScript types (for documentation and IDE support)
const NotificationType = NotificationSchema._type;
const CreateNotificationType = CreateNotificationSchema._type;
const UpdateNotificationType = UpdateNotificationSchema._type;
const NotificationQueryType = NotificationQuerySchema._type;
const NotificationResponseType = NotificationResponseSchema._type;

module.exports = {
  NotificationSchema,
  CreateNotificationSchema,
  UpdateNotificationSchema,
  NotificationQuerySchema,
  NotificationResponseSchema,
  // Export types for JSDoc
  NotificationType,
  CreateNotificationType,
  UpdateNotificationType,
  NotificationQueryType,
  NotificationResponseType,
};
